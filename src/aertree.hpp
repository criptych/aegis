////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __AERTREE_HPP__
#define __AERTREE_HPP__ 1

////////////////////////////////////////////////////////////////////////////////

#include "aeextent.hpp"

////////////////////////////////////////////////////////////////////////////////

#include <cinttypes>
#include <vector>

////////////////////////////////////////////////////////////////////////////////

template <typename K, typename T=double>
class aeRtreeT {
public:
    aeRtreeT(
        float minFill = 0.3f,
        unsigned int capacity = 32
    ): mMinFill(minFill), mCapacity(capacity) {
    }

    std::vector<K> search(const aeExtentT<T> &extent) const;

    void insert(const K &key, const aeExtentT<T> &extent);

    void remove(const K &key);

private:
    struct Page {
        Page(): mChildren() {}
        ~Page() {
            for (Page *child : mChildren) { delete child; }
        }
        std::vector<Page*> mChildren;
    };

private:
    float mMinFill;
    unsigned int mCapacity;
    Page mRoot;
};

////////////////////////////////////////////////////////////////////////////////

typedef aeRtreeT<void*, double> aeRtree;
typedef aeRtreeT<int32_t, double> aeRtreeInt32;
typedef aeRtreeT<uint32_t, double> aeRtreeUint32;
typedef aeRtreeT<ptrdiff_t, double> aeRtreeInt;

////////////////////////////////////////////////////////////////////////////////

#endif // __AERTREE_HPP__

////////////////////////////////////////////////////////////////////////////////
//  EOF
////////////////////////////////////////////////////////////////////////////////

