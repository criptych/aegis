////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////

#include "catch.hpp"
#include "aestats.hpp"

////////////////////////////////////////////////////////////////////////////////

TEST_CASE("statistics calculation", "[aeStatistics]") {
    static const double EPSILON = 0.0000000001;

    SECTION("empty data set") {
        aeStatistics st;

        REQUIRE(st.count() == 0);
        CHECK(std::isnan(st.min()));
        CHECK(std::isnan(st.max()));
        CHECK(std::isnan(st.mean()));
        CHECK(std::isnan(st.popVariance()));
        CHECK(std::isnan(st.popStdev()));
        CHECK(std::isnan(st.variance()));
        CHECK(std::isnan(st.stdev()));
        CHECK(std::isnan(st.skewness()));
        CHECK(std::isnan(st.kurtosis()));
    }

    SECTION("single value [1]") {
        aeStatistics st;
        st.update(1.0);

        REQUIRE(st.count() == 1);
        CHECK(st.min() == Approx(1.0));
        CHECK(st.max() == Approx(1.0));
        CHECK(st.mean() == Approx(1.0).epsilon(EPSILON));
        CHECK(std::isnan(st.popVariance()));
        CHECK(std::isnan(st.popStdev()));
        CHECK(std::isnan(st.variance()));
        CHECK(std::isnan(st.stdev()));
        CHECK(std::isnan(st.skewness()));
        CHECK(std::isnan(st.kurtosis()));
    }

    SECTION("two values [1 2]") {
        aeStatistics st;
        st.update(1.0);
        st.update(2.0);

        REQUIRE(st.count() == 2);
        CHECK(st.min() == Approx(1.0));
        CHECK(st.max() == Approx(2.0));
        CHECK(st.mean() == Approx(1.5).epsilon(EPSILON));
        CHECK(st.popVariance() == Approx(0.25).epsilon(EPSILON));
        CHECK(st.popStdev() == Approx(0.5).epsilon(EPSILON));
        CHECK(st.variance() == Approx(0.5).epsilon(EPSILON));
        CHECK(st.stdev() == Approx(0.7071067812).epsilon(EPSILON));
        CHECK(st.skewness() == Approx(0.0).epsilon(EPSILON));
        CHECK(st.kurtosis() == Approx(-2.0).epsilon(EPSILON));
    }

    SECTION("sample data: [2, 4, 4, 4, 5, 5, 7, 9]") {
        double data[] = { 2, 4, 4, 4, 5, 5, 7, 9 };
        aeStatistics st(std::begin(data), std::end(data));

        REQUIRE(st.count() == 8);
        CHECK(st.min() == Approx(2.0));
        CHECK(st.max() == Approx(9.0));
        CHECK(st.mean() == Approx(5.0).epsilon(EPSILON));
        CHECK(st.popVariance() == Approx(4.0).epsilon(EPSILON));
        CHECK(st.popStdev() == Approx(2.0).epsilon(EPSILON));
        CHECK(st.variance() == Approx(4.5714285714).epsilon(EPSILON));
        CHECK(st.stdev() == Approx(2.1380899352).epsilon(EPSILON));
        CHECK(st.skewness() == Approx(0.656250).epsilon(EPSILON));
        CHECK(st.kurtosis() == Approx(-0.218750).epsilon(EPSILON));
    }

    SECTION("sample data: [2, 4, 4, 4] and [5, 5, 7, 9]") {
        double data1[] = { 2, 4, 4, 4 };
        double data2[] = { 5, 5, 7, 9 };

        aeStatistics st1(std::begin(data1), std::end(data1));
        aeStatistics st2(std::begin(data2), std::end(data2));

        SECTION("list 1 statistics") {
            REQUIRE(st1.count() == 4);
            CHECK(st1.min() == Approx(2.0));
            CHECK(st1.max() == Approx(4.0));
            CHECK(st1.mean() == Approx(3.5).epsilon(EPSILON));
            CHECK(st1.popVariance() == Approx(0.75).epsilon(EPSILON));
            CHECK(st1.popStdev() == Approx(0.8660254038).epsilon(EPSILON));
            CHECK(st1.variance() == Approx(1.0).epsilon(EPSILON));
            CHECK(st1.stdev() == Approx(1.0).epsilon(EPSILON));
            CHECK(st1.skewness() == Approx(-1.1547005384).epsilon(EPSILON));
            CHECK(st1.kurtosis() == Approx(-0.6666666667).epsilon(EPSILON));
        }

        SECTION("list 2 statistics") {
            REQUIRE(st2.count() == 4);
            CHECK(st2.min() == Approx(5.0));
            CHECK(st2.max() == Approx(9.0));
            CHECK(st2.mean() == Approx(6.5).epsilon(EPSILON));
            CHECK(st2.popVariance() == Approx(2.75).epsilon(EPSILON));
            CHECK(st2.popStdev() == Approx(1.6583123952).epsilon(EPSILON));
            CHECK(st2.variance() == Approx(3.6666666667).epsilon(EPSILON));
            CHECK(st2.stdev() == Approx(1.9148542155).epsilon(EPSILON));
            CHECK(st2.skewness() == Approx(0.4933822002).epsilon(EPSILON));
            CHECK(st2.kurtosis() == Approx(-1.3719008264).epsilon(EPSILON));
        }

        aeStatistics st(st1 + st2);

        SECTION("combined statistics") {
            REQUIRE(st.count() == 8);
            CHECK(st.min() == Approx(2.0));
            CHECK(st.max() == Approx(9.0));
            CHECK(st.mean() == Approx(5.0).epsilon(EPSILON));
            CHECK(st.popVariance() == Approx(4.0).epsilon(EPSILON));
            CHECK(st.popStdev() == Approx(2.0).epsilon(EPSILON));
            CHECK(st.variance() == Approx(4.5714285714).epsilon(EPSILON));
            CHECK(st.stdev() == Approx(2.1380899352).epsilon(EPSILON));
            CHECK(st.skewness() == Approx(0.656250).epsilon(EPSILON));
            CHECK(st.kurtosis() == Approx(-0.218750).epsilon(EPSILON));
        }
    }

    /* <http://www.itl.nist.gov/div898/strd/> */
    SECTION("sample data from NIST StRD") {
        SECTION("Marvo") {
            double data[] = {
                2.00180,2.00170,2.00180,2.00190,2.00180,2.00170,2.00150,
                2.00140,2.00150,2.00150,2.00170,2.00180,2.00180,2.00190,
                2.00190,2.00210,2.00200,2.00160,2.00140,2.00130,2.00130,
                2.00150,2.00150,2.00160,2.00150,2.00140,2.00130,2.00140,
                2.00150,2.00140,2.00150,2.00160,2.00150,2.00160,2.00190,
                2.00200,2.00200,2.00210,2.00220,2.00230,2.00240,2.00250,
                2.00270,2.00260,2.00260,2.00260,2.00270,2.00260,2.00250,
                2.00240,
            };

            aeStatistics st(std::begin(data), std::end(data));
            CAPTURE(st.mean());
            CAPTURE(st.variance());
            CAPTURE(st.stdev());
            CAPTURE(st.popVariance());
            CAPTURE(st.popStdev());
            CAPTURE(st.skewness());
            CAPTURE(st.kurtosis());
            REQUIRE(st.count() == 50);
            CHECK(st.mean() == Approx(2.00185600000000));
            CHECK(st.stdev() == Approx(0.000429123454003053));
        }

        SECTION("Michelso") {
            double data[] = {
                299.85,299.74,299.90,300.07,299.93,299.85,299.95,299.98,299.98,
                299.88,300.00,299.98,299.93,299.65,299.76,299.81,300.00,300.00,
                299.96,299.96,299.96,299.94,299.96,299.94,299.88,299.80,299.85,
                299.88,299.90,299.84,299.83,299.79,299.81,299.88,299.88,299.83,
                299.80,299.79,299.76,299.80,299.88,299.88,299.88,299.86,299.72,
                299.72,299.62,299.86,299.97,299.95,299.88,299.91,299.85,299.87,
                299.84,299.84,299.85,299.84,299.84,299.84,299.89,299.81,299.81,
                299.82,299.80,299.77,299.76,299.74,299.75,299.76,299.91,299.92,
                299.89,299.86,299.88,299.72,299.84,299.85,299.85,299.78,299.89,
                299.84,299.78,299.81,299.76,299.81,299.79,299.81,299.82,299.85,
                299.87,299.87,299.81,299.74,299.81,299.94,299.95,299.80,299.81,
                299.87,
            };

            aeStatistics st(std::begin(data), std::end(data));
            CAPTURE(st.mean());
            CAPTURE(st.variance());
            CAPTURE(st.stdev());
            CAPTURE(st.popVariance());
            CAPTURE(st.popStdev());
            CAPTURE(st.skewness());
            CAPTURE(st.kurtosis());
            REQUIRE(st.count() == 100);
            CHECK(st.mean() == Approx(299.852400000000));
            CHECK(st.stdev() == Approx(0.0790105478190518));
        }

        SECTION("Lew") {
            double data[] = {
                -213,-564,-35,-15,141,115,-420,-360,203,-338,-431,194,-220,
                -513,154,-125,-559,92,-21,-579,-52,99,-543,-175,162,-457,-346,
                204,-300,-474,164,-107,-572,-8,83,-541,-224,180,-420,-374,201,
                -236,-531,83,27,-564,-112,131,-507,-254,199,-311,-495,143,-46,
                -579,-90,136,-472,-338,202,-287,-477,169,-124,-568,17,48,-568,
                -135,162,-430,-422,172,-74,-577,-13,92,-534,-243,194,-355,-465,
                156,-81,-578,-64,139,-449,-384,193,-198,-538,110,-44,-577,-6,
                66,-552,-164,161,-460,-344,205,-281,-504,134,-28,-576,-118,156,
                -437,-381,200,-220,-540,83,11,-568,-160,172,-414,-408,188,-125,
                -572,-32,139,-492,-321,205,-262,-504,142,-83,-574,0,48,-571,
                -106,137,-501,-266,190,-391,-406,194,-186,-553,83,-13,-577,-49,
                103,-515,-280,201,300,-506,131,-45,-578,-80,138,-462,-361,201,
                -211,-554,32,74,-533,-235,187,-372,-442,182,-147,-566,25,68,
                -535,-244,194,-351,-463,174,-125,-570,15,72,-550,-190,172,-424,
                -385,198,-218,-536,96,
            };

            aeStatistics st(std::begin(data), std::end(data));
            CAPTURE(st.mean());
            CAPTURE(st.variance());
            CAPTURE(st.stdev());
            CAPTURE(st.popVariance());
            CAPTURE(st.popStdev());
            CAPTURE(st.skewness());
            CAPTURE(st.kurtosis());
            REQUIRE(st.count() == 200);
            CHECK(st.mean() == Approx(-177.435000000000));
            CHECK(st.stdev() == Approx(277.332168044316));
        }

        SECTION("Lottery") {
            double data[] = {
                162,671,933,414,788,730,817,33,536,875,670,236,473,167,877,980,
                316,950,456,92,517,557,956,954,104,178,794,278,147,773,437,435,
                502,610,582,780,689,562,964,791,28,97,848,281,858,538,660,972,
                671,613,867,448,738,966,139,636,847,659,754,243,122,455,195,
                968,793,59,730,361,574,522,97,762,431,158,429,414,22,629,788,
                999,187,215,810,782,47,34,108,986,25,644,829,630,315,567,919,
                331,207,412,242,607,668,944,749,168,864,442,533,805,372,63,458,
                777,416,340,436,140,919,350,510,572,905,900,85,389,473,758,444,
                169,625,692,140,897,672,288,312,860,724,226,884,508,976,741,
                476,417,831,15,318,432,241,114,799,955,833,358,935,146,630,830,
                440,642,356,373,271,715,367,393,190,669,8,861,108,795,269,590,
                326,866,64,523,862,840,219,382,998,4,628,305,747,247,34,747,
                729,645,856,974,24,568,24,694,608,480,410,729,947,293,53,930,
                223,203,677,227,62,455,387,318,562,242,428,968,
            };

            aeStatistics st(std::begin(data), std::end(data));
            CAPTURE(st.mean());
            CAPTURE(st.variance());
            CAPTURE(st.stdev());
            CAPTURE(st.popVariance());
            CAPTURE(st.popStdev());
            CAPTURE(st.skewness());
            CAPTURE(st.kurtosis());
            REQUIRE(st.count() == 218);
            CHECK(st.mean() == Approx(518.958715596330));
            CHECK(st.stdev() == Approx(291.699727470969));
        }

        SECTION("PiDigits") {
            double data[] = {
                3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,
                5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,
                9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,8,0,3,4,8,2,5,3,4,
                2,1,1,7,0,6,7,9,8,2,1,4,8,0,8,6,5,1,3,2,8,2,3,0,6,6,4,7,0,9,3,
                8,4,4,6,0,9,5,5,0,5,8,2,2,3,1,7,2,5,3,5,9,4,0,8,1,2,8,4,8,1,1,
                1,7,4,5,0,2,8,4,1,0,2,7,0,1,9,3,8,5,2,1,1,0,5,5,5,9,6,4,4,6,2,
                2,9,4,8,9,5,4,9,3,0,3,8,1,9,6,4,4,2,8,8,1,0,9,7,5,6,6,5,9,3,3,
                4,4,6,1,2,8,4,7,5,6,4,8,2,3,3,7,8,6,7,8,3,1,6,5,2,7,1,2,0,1,9,
                0,9,1,4,5,6,4,8,5,6,6,9,2,3,4,6,0,3,4,8,6,1,0,4,5,4,3,2,6,6,4,
                8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,3,7,2,4,5,8,7,0,0,6,
                6,0,6,3,1,5,5,8,8,1,7,4,8,8,1,5,2,0,9,2,0,9,6,2,8,2,9,2,5,4,0,
                9,1,7,1,5,3,6,4,3,6,7,8,9,2,5,9,0,3,6,0,0,1,1,3,3,0,5,3,0,5,4,
                8,8,2,0,4,6,6,5,2,1,3,8,4,1,4,6,9,5,1,9,4,1,5,1,1,6,0,9,4,3,3,
                0,5,7,2,7,0,3,6,5,7,5,9,5,9,1,9,5,3,0,9,2,1,8,6,1,1,7,3,8,1,9,
                3,2,6,1,1,7,9,3,1,0,5,1,1,8,5,4,8,0,7,4,4,6,2,3,7,9,9,6,2,7,4,
                9,5,6,7,3,5,1,8,8,5,7,5,2,7,2,4,8,9,1,2,2,7,9,3,8,1,8,3,0,1,1,
                9,4,9,1,2,9,8,3,3,6,7,3,3,6,2,4,4,0,6,5,6,6,4,3,0,8,6,0,2,1,3,
                9,4,9,4,6,3,9,5,2,2,4,7,3,7,1,9,0,7,0,2,1,7,9,8,6,0,9,4,3,7,0,
                2,7,7,0,5,3,9,2,1,7,1,7,6,2,9,3,1,7,6,7,5,2,3,8,4,6,7,4,8,1,8,
                4,6,7,6,6,9,4,0,5,1,3,2,0,0,0,5,6,8,1,2,7,1,4,5,2,6,3,5,6,0,8,
                2,7,7,8,5,7,7,1,3,4,2,7,5,7,7,8,9,6,0,9,1,7,3,6,3,7,1,7,8,7,2,
                1,4,6,8,4,4,0,9,0,1,2,2,4,9,5,3,4,3,0,1,4,6,5,4,9,5,8,5,3,7,1,
                0,5,0,7,9,2,2,7,9,6,8,9,2,5,8,9,2,3,5,4,2,0,1,9,9,5,6,1,1,2,1,
                2,9,0,2,1,9,6,0,8,6,4,0,3,4,4,1,8,1,5,9,8,1,3,6,2,9,7,7,4,7,7,
                1,3,0,9,9,6,0,5,1,8,7,0,7,2,1,1,3,4,9,9,9,9,9,9,8,3,7,2,9,7,8,
                0,4,9,9,5,1,0,5,9,7,3,1,7,3,2,8,1,6,0,9,6,3,1,8,5,9,5,0,2,4,4,
                5,9,4,5,5,3,4,6,9,0,8,3,0,2,6,4,2,5,2,2,3,0,8,2,5,3,3,4,4,6,8,
                5,0,3,5,2,6,1,9,3,1,1,8,8,1,7,1,0,1,0,0,0,3,1,3,7,8,3,8,7,5,2,
                8,8,6,5,8,7,5,3,3,2,0,8,3,8,1,4,2,0,6,1,7,1,7,7,6,6,9,1,4,7,3,
                0,3,5,9,8,2,5,3,4,9,0,4,2,8,7,5,5,4,6,8,7,3,1,1,5,9,5,6,2,8,6,
                3,8,8,2,3,5,3,7,8,7,5,9,3,7,5,1,9,5,7,7,8,1,8,5,7,7,3,0,5,3,2,
                1,7,1,2,2,6,8,0,6,6,1,3,0,0,1,9,2,7,8,7,6,6,1,1,1,9,5,9,0,9,2,
                1,6,4,2,0,1,9,8,9,3,8,0,9,5,2,5,7,2,0,1,0,6,5,4,8,5,8,6,3,2,7,
                8,8,6,5,9,3,6,1,5,3,3,8,1,8,2,7,9,6,8,2,3,0,3,0,1,9,5,2,0,3,5,
                3,0,1,8,5,2,9,6,8,9,9,5,7,7,3,6,2,2,5,9,9,4,1,3,8,9,1,2,4,9,7,
                2,1,7,7,5,2,8,3,4,7,9,1,3,1,5,1,5,5,7,4,8,5,7,2,4,2,4,5,4,1,5,
                0,6,9,5,9,5,0,8,2,9,5,3,3,1,1,6,8,6,1,7,2,7,8,5,5,8,8,9,0,7,5,
                0,9,8,3,8,1,7,5,4,6,3,7,4,6,4,9,3,9,3,1,9,2,5,5,0,6,0,4,0,0,9,
                2,7,7,0,1,6,7,1,1,3,9,0,0,9,8,4,8,8,2,4,0,1,2,8,5,8,3,6,1,6,0,
                3,5,6,3,7,0,7,6,6,0,1,0,4,7,1,0,1,8,1,9,4,2,9,5,5,5,9,6,1,9,8,
                9,4,6,7,6,7,8,3,7,4,4,9,4,4,8,2,5,5,3,7,9,7,7,4,7,2,6,8,4,7,1,
                0,4,0,4,7,5,3,4,6,4,6,2,0,8,0,4,6,6,8,4,2,5,9,0,6,9,4,9,1,2,9,
                3,3,1,3,6,7,7,0,2,8,9,8,9,1,5,2,1,0,4,7,5,2,1,6,2,0,5,6,9,6,6,
                0,2,4,0,5,8,0,3,8,1,5,0,1,9,3,5,1,1,2,5,3,3,8,2,4,3,0,0,3,5,5,
                8,7,6,4,0,2,4,7,4,9,6,4,7,3,2,6,3,9,1,4,1,9,9,2,7,2,6,0,4,2,6,
                9,9,2,2,7,9,6,7,8,2,3,5,4,7,8,1,6,3,6,0,0,9,3,4,1,7,2,1,6,4,1,
                2,1,9,9,2,4,5,8,6,3,1,5,0,3,0,2,8,6,1,8,2,9,7,4,5,5,5,7,0,6,7,
                4,9,8,3,8,5,0,5,4,9,4,5,8,8,5,8,6,9,2,6,9,9,5,6,9,0,9,2,7,2,1,
                0,7,9,7,5,0,9,3,0,2,9,5,5,3,2,1,1,6,5,3,4,4,9,8,7,2,0,2,7,5,5,
                9,6,0,2,3,6,4,8,0,6,6,5,4,9,9,1,1,9,8,8,1,8,3,4,7,9,7,7,5,3,5,
                6,6,3,6,9,8,0,7,4,2,6,5,4,2,5,2,7,8,6,2,5,5,1,8,1,8,4,1,7,5,7,
                4,6,7,2,8,9,0,9,7,7,7,7,2,7,9,3,8,0,0,0,8,1,6,4,7,0,6,0,0,1,6,
                1,4,5,2,4,9,1,9,2,1,7,3,2,1,7,2,1,4,7,7,2,3,5,0,1,4,1,4,4,1,9,
                7,3,5,6,8,5,4,8,1,6,1,3,6,1,1,5,7,3,5,2,5,5,2,1,3,3,4,7,5,7,4,
                1,8,4,9,4,6,8,4,3,8,5,2,3,3,2,3,9,0,7,3,9,4,1,4,3,3,3,4,5,4,7,
                7,6,2,4,1,6,8,6,2,5,1,8,9,8,3,5,6,9,4,8,5,5,6,2,0,9,9,2,1,9,2,
                2,2,1,8,4,2,7,2,5,5,0,2,5,4,2,5,6,8,8,7,6,7,1,7,9,0,4,9,4,6,0,
                1,6,5,3,4,6,6,8,0,4,9,8,8,6,2,7,2,3,2,7,9,1,7,8,6,0,8,5,7,8,4,
                3,8,3,8,2,7,9,6,7,9,7,6,6,8,1,4,5,4,1,0,0,9,5,3,8,8,3,7,8,6,3,
                6,0,9,5,0,6,8,0,0,6,4,2,2,5,1,2,5,2,0,5,1,1,7,3,9,2,9,8,4,8,9,
                6,0,8,4,1,2,8,4,8,8,6,2,6,9,4,5,6,0,4,2,4,1,9,6,5,2,8,5,0,2,2,
                2,1,0,6,6,1,1,8,6,3,0,6,7,4,4,2,7,8,6,2,2,0,3,9,1,9,4,9,4,5,0,
                4,7,1,2,3,7,1,3,7,8,6,9,6,0,9,5,6,3,6,4,3,7,1,9,1,7,2,8,7,4,6,
                7,7,6,4,6,5,7,5,7,3,9,6,2,4,1,3,8,9,0,8,6,5,8,3,2,6,4,5,9,9,5,
                8,1,3,3,9,0,4,7,8,0,2,7,5,9,0,0,9,9,4,6,5,7,6,4,0,7,8,9,5,1,2,
                6,9,4,6,8,3,9,8,3,5,2,5,9,5,7,0,9,8,2,5,8,2,2,6,2,0,5,2,2,4,8,
                9,4,0,7,7,2,6,7,1,9,4,7,8,2,6,8,4,8,2,6,0,1,4,7,6,9,9,0,9,0,2,
                6,4,0,1,3,6,3,9,4,4,3,7,4,5,5,3,0,5,0,6,8,2,0,3,4,9,6,2,5,2,4,
                5,1,7,4,9,3,9,9,6,5,1,4,3,1,4,2,9,8,0,9,1,9,0,6,5,9,2,5,0,9,3,
                7,2,2,1,6,9,6,4,6,1,5,1,5,7,0,9,8,5,8,3,8,7,4,1,0,5,9,7,8,8,5,
                9,5,9,7,7,2,9,7,5,4,9,8,9,3,0,1,6,1,7,5,3,9,2,8,4,6,8,1,3,8,2,
                6,8,6,8,3,8,6,8,9,4,2,7,7,4,1,5,5,9,9,1,8,5,5,9,2,5,2,4,5,9,5,
                3,9,5,9,4,3,1,0,4,9,9,7,2,5,2,4,6,8,0,8,4,5,9,8,7,2,7,3,6,4,4,
                6,9,5,8,4,8,6,5,3,8,3,6,7,3,6,2,2,2,6,2,6,0,9,9,1,2,4,6,0,8,0,
                5,1,2,4,3,8,8,4,3,9,0,4,5,1,2,4,4,1,3,6,5,4,9,7,6,2,7,8,0,7,9,
                7,7,1,5,6,9,1,4,3,5,9,9,7,7,0,0,1,2,9,6,1,6,0,8,9,4,4,1,6,9,4,
                8,6,8,5,5,5,8,4,8,4,0,6,3,5,3,4,2,2,0,7,2,2,2,5,8,2,8,4,8,8,6,
                4,8,1,5,8,4,5,6,0,2,8,5,0,6,0,1,6,8,4,2,7,3,9,4,5,2,2,6,7,4,6,
                7,6,7,8,8,9,5,2,5,2,1,3,8,5,2,2,5,4,9,9,5,4,6,6,6,7,2,7,8,2,3,
                9,8,6,4,5,6,5,9,6,1,1,6,3,5,4,8,8,6,2,3,0,5,7,7,4,5,6,4,9,8,0,
                3,5,5,9,3,6,3,4,5,6,8,1,7,4,3,2,4,1,1,2,5,1,5,0,7,6,0,6,9,4,7,
                9,4,5,1,0,9,6,5,9,6,0,9,4,0,2,5,2,2,8,8,7,9,7,1,0,8,9,3,1,4,5,
                6,6,9,1,3,6,8,6,7,2,2,8,7,4,8,9,4,0,5,6,0,1,0,1,5,0,3,3,0,8,6,
                1,7,9,2,8,6,8,0,9,2,0,8,7,4,7,6,0,9,1,7,8,2,4,9,3,8,5,8,9,0,0,
                9,7,1,4,9,0,9,6,7,5,9,8,5,2,6,1,3,6,5,5,4,9,7,8,1,8,9,3,1,2,9,
                7,8,4,8,2,1,6,8,2,9,9,8,9,4,8,7,2,2,6,5,8,8,0,4,8,5,7,5,6,4,0,
                1,4,2,7,0,4,7,7,5,5,5,1,3,2,3,7,9,6,4,1,4,5,1,5,2,3,7,4,6,2,3,
                4,3,6,4,5,4,2,8,5,8,4,4,4,7,9,5,2,6,5,8,6,7,8,2,1,0,5,1,1,4,1,
                3,5,4,7,3,5,7,3,9,5,2,3,1,1,3,4,2,7,1,6,6,1,0,2,1,3,5,9,6,9,5,
                3,6,2,3,1,4,4,2,9,5,2,4,8,4,9,3,7,1,8,7,1,1,0,1,4,5,7,6,5,4,0,
                3,5,9,0,2,7,9,9,3,4,4,0,3,7,4,2,0,0,7,3,1,0,5,7,8,5,3,9,0,6,2,
                1,9,8,3,8,7,4,4,7,8,0,8,4,7,8,4,8,9,6,8,3,3,2,1,4,4,5,7,1,3,8,
                6,8,7,5,1,9,4,3,5,0,6,4,3,0,2,1,8,4,5,3,1,9,1,0,4,8,4,8,1,0,0,
                5,3,7,0,6,1,4,6,8,0,6,7,4,9,1,9,2,7,8,1,9,1,1,9,7,9,3,9,9,5,2,
                0,6,1,4,1,9,6,6,3,4,2,8,7,5,4,4,4,0,6,4,3,7,4,5,1,2,3,7,1,8,1,
                9,2,1,7,9,9,9,8,3,9,1,0,1,5,9,1,9,5,6,1,8,1,4,6,7,5,1,4,2,6,9,
                1,2,3,9,7,4,8,9,4,0,9,0,7,1,8,6,4,9,4,2,3,1,9,6,1,5,6,7,9,4,5,
                2,0,8,0,9,5,1,4,6,5,5,0,2,2,5,2,3,1,6,0,3,8,8,1,9,3,0,1,4,2,0,
                9,3,7,6,2,1,3,7,8,5,5,9,5,6,6,3,8,9,3,7,7,8,7,0,8,3,0,3,9,0,6,
                9,7,9,2,0,7,7,3,4,6,7,2,2,1,8,2,5,6,2,5,9,9,6,6,1,5,0,1,4,2,1,
                5,0,3,0,6,8,0,3,8,4,4,7,7,3,4,5,4,9,2,0,2,6,0,5,4,1,4,6,6,5,9,
                2,5,2,0,1,4,9,7,4,4,2,8,5,0,7,3,2,5,1,8,6,6,6,0,0,2,1,3,2,4,3,
                4,0,8,8,1,9,0,7,1,0,4,8,6,3,3,1,7,3,4,6,4,9,6,5,1,4,5,3,9,0,5,
                7,9,6,2,6,8,5,6,1,0,0,5,5,0,8,1,0,6,6,5,8,7,9,6,9,9,8,1,6,3,5,
                7,4,7,3,6,3,8,4,0,5,2,5,7,1,4,5,9,1,0,2,8,9,7,0,6,4,1,4,0,1,1,
                0,9,7,1,2,0,6,2,8,0,4,3,9,0,3,9,7,5,9,5,1,5,6,7,7,1,5,7,7,0,0,
                4,2,0,3,3,7,8,6,9,9,3,6,0,0,7,2,3,0,5,5,8,7,6,3,1,7,6,3,5,9,4,
                2,1,8,7,3,1,2,5,1,4,7,1,2,0,5,3,2,9,2,8,1,9,1,8,2,6,1,8,6,1,2,
                5,8,6,7,3,2,1,5,7,9,1,9,8,4,1,4,8,4,8,8,2,9,1,6,4,4,7,0,6,0,9,
                5,7,5,2,7,0,6,9,5,7,2,2,0,9,1,7,5,6,7,1,1,6,7,2,2,9,1,0,9,8,1,
                6,9,0,9,1,5,2,8,0,1,7,3,5,0,6,7,1,2,7,4,8,5,8,3,2,2,2,8,7,1,8,
                3,5,2,0,9,3,5,3,9,6,5,7,2,5,1,2,1,0,8,3,5,7,9,1,5,1,3,6,9,8,8,
                2,0,9,1,4,4,4,2,1,0,0,6,7,5,1,0,3,3,4,6,7,1,1,0,3,1,4,1,2,6,7,
                1,1,1,3,6,9,9,0,8,6,5,8,5,1,6,3,9,8,3,1,5,0,1,9,7,0,1,6,5,1,5,
                1,1,6,8,5,1,7,1,4,3,7,6,5,7,6,1,8,3,5,1,5,5,6,5,0,8,8,4,9,0,9,
                9,8,9,8,5,9,9,8,2,3,8,7,3,4,5,5,2,8,3,3,1,6,3,5,5,0,7,6,4,7,9,
                1,8,5,3,5,8,9,3,2,2,6,1,8,5,4,8,9,6,3,2,1,3,2,9,3,3,0,8,9,8,5,
                7,0,6,4,2,0,4,6,7,5,2,5,9,0,7,0,9,1,5,4,8,1,4,1,6,5,4,9,8,5,9,
                4,6,1,6,3,7,1,8,0,2,7,0,9,8,1,9,9,4,3,0,9,9,2,4,4,8,8,9,5,7,5,
                7,1,2,8,2,8,9,0,5,9,2,3,2,3,3,2,6,0,9,7,2,9,9,7,1,2,0,8,4,4,3,
                3,5,7,3,2,6,5,4,8,9,3,8,2,3,9,1,1,9,3,2,5,9,7,4,6,3,6,6,7,3,0,
                5,8,3,6,0,4,1,4,2,8,1,3,8,8,3,0,3,2,0,3,8,2,4,9,0,3,7,5,8,9,8,
                5,2,4,3,7,4,4,1,7,0,2,9,1,3,2,7,6,5,6,1,8,0,9,3,7,7,3,4,4,4,0,
                3,0,7,0,7,4,6,9,2,1,1,2,0,1,9,1,3,0,2,0,3,3,0,3,8,0,1,9,7,6,2,
                1,1,0,1,1,0,0,4,4,9,2,9,3,2,1,5,1,6,0,8,4,2,4,4,4,8,5,9,6,3,7,
                6,6,9,8,3,8,9,5,2,2,8,6,8,4,7,8,3,1,2,3,5,5,2,6,5,8,2,1,3,1,4,
                4,9,5,7,6,8,5,7,2,6,2,4,3,3,4,4,1,8,9,3,0,3,9,6,8,6,4,2,6,2,4,
                3,4,1,0,7,7,3,2,2,6,9,7,8,0,2,8,0,7,3,1,8,9,1,5,4,4,1,1,0,1,0,
                4,4,6,8,2,3,2,5,2,7,1,6,2,0,1,0,5,2,6,5,2,2,7,2,1,1,1,6,6,0,3,
                9,6,6,6,5,5,7,3,0,9,2,5,4,7,1,1,0,5,5,7,8,5,3,7,6,3,4,6,6,8,2,
                0,6,5,3,1,0,9,8,9,6,5,2,6,9,1,8,6,2,0,5,6,4,7,6,9,3,1,2,5,7,0,
                5,8,6,3,5,6,6,2,0,1,8,5,5,8,1,0,0,7,2,9,3,6,0,6,5,9,8,7,6,4,8,
                6,1,1,7,9,1,0,4,5,3,3,4,8,8,5,0,3,4,6,1,1,3,6,5,7,6,8,6,7,5,3,
                2,4,9,4,4,1,6,6,8,0,3,9,6,2,6,5,7,9,7,8,7,7,1,8,5,5,6,0,8,4,5,
                5,2,9,6,5,4,1,2,6,6,5,4,0,8,5,3,0,6,1,4,3,4,4,4,3,1,8,5,8,6,7,
                6,9,7,5,1,4,5,6,6,1,4,0,6,8,0,0,7,0,0,2,3,7,8,7,7,6,5,9,1,3,4,
                4,0,1,7,1,2,7,4,9,4,7,0,4,2,0,5,6,2,2,3,0,5,3,8,9,9,4,5,6,1,3,
                1,4,0,7,1,1,2,7,0,0,0,4,0,7,8,5,4,7,3,3,2,6,9,9,3,9,0,8,1,4,5,
                4,6,6,4,6,4,5,8,8,0,7,9,7,2,7,0,8,2,6,6,8,3,0,6,3,4,3,2,8,5,8,
                7,8,5,6,9,8,3,0,5,2,3,5,8,0,8,9,3,3,0,6,5,7,5,7,4,0,6,7,9,5,4,
                5,7,1,6,3,7,7,5,2,5,4,2,0,2,1,1,4,9,5,5,7,6,1,5,8,1,4,0,0,2,5,
                0,1,2,6,2,2,8,5,9,4,1,3,0,2,1,6,4,7,1,5,5,0,9,7,9,2,5,9,2,3,0,
                9,9,0,7,9,6,5,4,7,3,7,6,1,2,5,5,1,7,6,5,6,7,5,1,3,5,7,5,1,7,8,
                2,9,6,6,6,4,5,4,7,7,9,1,7,4,5,0,1,1,2,9,9,6,1,4,8,9,0,3,0,4,6,
                3,9,9,4,7,1,3,2,9,6,2,1,0,7,3,4,0,4,3,7,5,1,8,9,5,7,3,5,9,6,1,
                4,5,8,9,0,1,9,3,8,9,7,1,3,1,1,1,7,9,0,4,2,9,7,8,2,8,5,6,4,7,5,
                0,3,2,0,3,1,9,8,6,9,1,5,1,4,0,2,8,7,0,8,0,8,5,9,9,0,4,8,0,1,0,
                9,4,1,2,1,4,7,2,2,1,3,1,7,9,4,7,6,4,7,7,7,2,6,2,2,4,1,4,2,5,4,
                8,5,4,5,4,0,3,3,2,1,5,7,1,8,5,3,0,6,1,4,2,2,8,8,1,3,7,5,8,5,0,
                4,3,0,6,3,3,2,1,7,5,1,8,2,9,7,9,8,6,6,2,2,3,7,1,7,2,1,5,9,1,6,
                0,7,7,1,6,6,9,2,5,4,7,4,8,7,3,8,9,8,6,6,5,4,9,4,9,4,5,0,1,1,4,
                6,5,4,0,6,2,8,4,3,3,6,6,3,9,3,7,9,0,0,3,9,7,6,9,2,6,5,6,7,2,1,
                4,6,3,8,5,3,0,6,7,3,6,0,9,6,5,7,1,2,0,9,1,8,0,7,6,3,8,3,2,7,1,
                6,6,4,1,6,2,7,4,8,8,8,8,0,0,7,8,6,9,2,5,6,0,2,9,0,2,2,8,4,7,2,
                1,0,4,0,3,1,7,2,1,1,8,6,0,8,2,0,4,1,9,0,0,0,4,2,2,9,6,6,1,7,1,
                1,9,6,3,7,7,9,2,1,3,3,7,5,7,5,1,1,4,9,5,9,5,0,1,5,6,6,0,4,9,6,
                3,1,8,6,2,9,4,7,2,6,5,4,7,3,6,4,2,5,2,3,0,8,1,7,7,0,3,6,7,5,1,
                5,9,0,6,7,3,5,0,2,3,5,0,7,2,8,3,5,4,0,5,6,7,0,4,0,3,8,6,7,4,3,
                5,1,3,6,2,2,2,2,4,7,7,1,5,8,9,1,5,0,4,9,5,3,0,9,8,4,4,4,8,9,3,
                3,3,0,9,6,3,4,0,8,7,8,0,7,6,9,3,2,5,9,9,3,9,7,8,0,5,4,1,9,3,4,
                1,4,4,7,3,7,7,4,4,1,8,4,2,6,3,1,2,9,8,6,0,8,0,9,9,8,8,8,6,8,7,
                4,1,3,2,6,0,4,7,2,
            };

            aeStatistics st(std::begin(data), std::end(data));
            CAPTURE(st.mean());
            CAPTURE(st.variance());
            CAPTURE(st.stdev());
            CAPTURE(st.popVariance());
            CAPTURE(st.popStdev());
            CAPTURE(st.skewness());
            CAPTURE(st.kurtosis());
            REQUIRE(st.count() == 5000);
            CHECK(st.mean() == Approx(4.53480000000000));
            CHECK(st.stdev() == Approx(2.86733906028871));
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
//  EOF
////////////////////////////////////////////////////////////////////////////////

